/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.VeteranOrg.VeteranRole;

import Business.EcoSystem;
import Business.Enterprise.ConsultancyEnterprise;
import Business.JobDetails.JobDetails;
import Business.Organization.ConsultancyOrganization.ConsultantOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.ConsultancyServiceWorkRequest;
import Business.WorkQueue.JobPostingWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author bhargavisabbisetty
 */
public class Consultancy_Suggested_Jobs extends javax.swing.JPanel {
JPanel userProcessContainer;
    ConsultancyEnterprise enterprise;
    UserAccount userAccount;
    EcoSystem business;
//    ConsultancyServiceWorkRequest temp = new ConsultancyServiceWorkRequest();
    /**
     * Creates new form Consultancy_Suggested_Jobs
     */
    public Consultancy_Suggested_Jobs(JPanel userProcessContainer, ConsultancyEnterprise enterprise, UserAccount userAccount,EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.userAccount = userAccount;
        this.business = business;
        populate();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        Back_btn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Con_suggested_JTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Superclarendon", 1, 22)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 51, 255));
        jLabel1.setText("List of Jobs Applied");

        Back_btn.setFont(new java.awt.Font("Superclarendon", 0, 13)); // NOI18N
        Back_btn.setText("Back");
        Back_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Back_btnActionPerformed(evt);
            }
        });

        Con_suggested_JTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Company Name", "Job Title", "Salary", "Location", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(Con_suggested_JTable);

        jButton1.setFont(new java.awt.Font("Superclarendon", 0, 13)); // NOI18N
        jButton1.setText("View");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(32, 32, 32)
                        .addComponent(Back_btn))
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 598, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jLabel1)
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Back_btn)
                    .addComponent(jButton1))
                .addContainerGap(31, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void Back_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Back_btnActionPerformed
        // TODO add your handling code here:        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);

    }//GEN-LAST:event_Back_btnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int selectedRow = Con_suggested_JTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select atleast one row","Caution",JOptionPane.ERROR_MESSAGE);
            return;
        }

        JobPostingWorkRequest request = (JobPostingWorkRequest) Con_suggested_JTable.getValueAt(selectedRow, 0);

//        request.setStatus("Processing");
        View_Con_Job_JPanel processWorkRequestJPanel = new View_Con_Job_JPanel(userProcessContainer, request , enterprise, userAccount,business);
        userProcessContainer.add("processWorkRequestJPanel", processWorkRequestJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
                                
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back_btn;
    private javax.swing.JTable Con_suggested_JTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    void populate() {
        DefaultTableModel model = (DefaultTableModel) Con_suggested_JTable.getModel();
        model.setRowCount(0);
        int size1;
    for(Organization org:enterprise.getOrganizationDirectory().getOrganizationList()){
        if(org instanceof ConsultantOrganization){
            for(WorkRequest work:userAccount.getWorkQueue().getWorkRequestList()){
                System.out.println(userAccount.getWorkQueue().getWorkRequestList().size());
                {
                    if(work instanceof ConsultancyServiceWorkRequest){
                         System.out.println(work);
                        ConsultancyServiceWorkRequest req = (ConsultancyServiceWorkRequest) work;  
                        System.out.println(req.getJob_posting_work_req().size());
                        String x=req.getJobName();
                        size1 = req.getJob_posting_work_req().size();
                        ArrayList a=req.getJob_posting_work_req();
                        System.out.println(a);
                        if(size1 ==0)
                        {
                            JOptionPane.showMessageDialog(null, "No Jobs are suggested yet");
                        }
                        else{
//                            System.out.println(size1);
                        for(int i=0;i<size1;i++){
                           JobPostingWorkRequest jobpwr = req.getJob_posting_work_req().get(i);
                            JobDetails jd=jobpwr.getJobdetails();
                            Object[] row = new Object[8];
                                            row[0] = jobpwr;
                                            if (jd != null) {
                                                row[1] = jd.getJobTitle();
                                                row[2] = jd.getJobType();
                                                row[3] = jd.getMaxSalary();
                                                row[4] = jd.getLocation();
                                                row[5] =jobpwr.getStatus();
                                                System.out.println(jobpwr.getStatus());
                                                model.addRow(row);
                                            }}
                        }
//                        for(JobPostingWorkRequest jobpwr:req.getJob_posting_work_req()){
//                            
//                            JobDetails jd=jobpwr.getJobdetails();
//                            if (jobpwr.getStatus().equals("Applied")) {
//                                        System.out.println("hi");
//                                    } else {
////                                        if (selectedcategory.equals("All")) {
////                                            search_keyword_TB.setText("");
//                                            Object[] row = new Object[8];
//                                            row[0] = jobpwr;
//                                            if (jd != null) {
//                                                row[1] = jd.getJobTitle();
//                                                row[2] = jd.getJobType();
//                                                row[3] = jd.getMaxSalary();
//                                                row[4] = jd.getLocation();
//                                                row[5] =jobpwr.getStatus();
//                                                System.out.println(jobpwr.getStatus());
//                                                model.addRow(row);
//                                            }
//                            }
//                        }
//                    }
                }
            }
        }
    }  
    
            }
        }
    
    
}
